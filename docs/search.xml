<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>当前环境下注册OPENAI账号的一种方法</title>
    <url>/2023/04/%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%B3%A8%E5%86%8COPENAI%E8%B4%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>随着OPENAI系列产品的大火，OPENAI注册和使用的要求也越来越高，比如目前大部分代理的IP地址都无法进入platform.openai.com登录账号，无法绕过Cloudflare的验证，更不用说注册账号了，对于只使用API的人来说，在使用API时OPENAI并不检测你的IP地址，因此只需要有一个账号就可以正常使用，目前购买账号价格水涨船高，并且号商批量注册的账号被封禁概率也会明显变大，自己注册账号仍然是最经济合理的选择，下面提供一种可能可行的方法来注册一个OPENAI账号</p>
<h1 id="需要准备的内容"><a href="#需要准备的内容" class="headerlink" title="需要准备的内容"></a>需要准备的内容</h1><ol>
<li>一个<a href="https://mail.google.com/">谷歌</a>账号</li>
<li>一个<a href="https://cn.aliyun.com/">阿里云</a>账号</li>
<li>一个<a href="https://sms-activate.org/cn">sms-active</a>账号</li>
<li>一台电脑</li>
</ol>
<h2 id="为什么需要谷歌账号"><a href="#为什么需要谷歌账号" class="headerlink" title="为什么需要谷歌账号"></a>为什么需要谷歌账号</h2><p>目前OPENAI的注册逐渐收窄，只有Gmail可以稳定注册，而outlook邮箱可以概率使用，其他邮箱完全不能使用</p>
<h2 id="为什么推荐阿里云"><a href="#为什么推荐阿里云" class="headerlink" title="为什么推荐阿里云"></a>为什么推荐阿里云</h2><p>注册需要一个用的人少，并且和cloudflare较近的服务器，阿里云作为国内云服务商，很少有人使用阿里云服务器来提供代理服务，并且提供了印度尼西亚这种节点，可以节省成本</p>
<h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="购买云服务器"><a href="#购买云服务器" class="headerlink" title="购买云服务器"></a>购买云服务器</h2><p>进入<a href="https://ecs-buy.aliyun.com/">阿里云云服务器ECS控制台</a>，购买一个按量付费的实例，如<br><img src="/2023/04/%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%B3%A8%E5%86%8COPENAI%E8%B4%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/aliyun_cloud.png" alt="aliyun_cloud"><br>建议内存至少2G，CPU一核或两核足以，因为用的时间短，完全可以使用按量付费</p>
<p>因为后面需要远程桌面要服务器上面去，而Linux系统不自带桌面，所以系统选择Windows server 2022，中文与英文均可，建议不要选择2022之前的版本，因为默认浏览器为IE，不支持注册，还需要自己更换浏览器</p>
<p>可以把默认的ESSD云盘改为高效云盘，便宜一点点</p>
<p>流量计费建议选择按量计费，因为本身使用不了多少上行流量，还可能抹零直接全部抹掉</p>
<p>我最后的配置是这样的</p>
<p><img src="/2023/04/%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%B3%A8%E5%86%8COPENAI%E8%B4%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/config_1.png" alt="config_1"><br><img src="/2023/04/%E5%BD%93%E5%89%8D%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%B3%A8%E5%86%8COPENAI%E8%B4%A6%E5%8F%B7%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/config_2.png" alt="config_2"></p>
<p>之后直接下单，创建实例后下载RDP文件，等待完全启动后直接打开RDP文件使用远程桌面连接到服务器上</p>
<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>直接进入 <a href="https://platform.openai.com/">https://platform.openai.com</a> （或者 <a href="https://chat.openai.com/">https://chat.openai.com</a> 也行），然后点击sign up，建议直接使用邮箱注册而不是选择下方的sign in with google，之后验证邮箱（这里建议使用这个电脑注册谷歌账号，或者在自己电脑上注册后用自己电脑登录邮箱，防止谷歌账号被风控），一直到验证手机号这个环节</p>
<p>之后打开sms-active，购买一个印度尼西亚的手机号，此时的价格是22.5卢布，是所有手机号里面最便宜的，然后直接输入等待验证即可，如果该手机号5分钟都没有收到验证码，则退款重新购买一个，直到验证成功（这一点没有那么严格，更换几个手机号都没有触发风控）</p>
<p>之后通过cloudflare的验证（这一步基本上代理都是过不去的，可能还会看你的相应时间来判断是否为代理），此时正常情况下会跳转回注册前的界面，如果提示注册失败，那基本上是此时云服务器的IP有多人使用·（概率应该极低）</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol>
<li>本文是仅使用APIkey的注册教程，建议注册后立刻<a href="https://platform.openai.com/account/api-keys">获取API key</a>，然后创建一个新的API key，记录下来，之后建议不要在任何地点以任意形式登录OPENAI账号，减少被封号的可能</li>
<li>不要在香港，台湾等代理下使用API key，因OPENAI在中国仅仅受到了DNS干扰，可以通过改hosts绕过，也不要在直连环境下尝试使用API key，这种情况下有很大概率被封号</li>
<li>正常使用API key可以试试这两个扩展<a href="https://chrome.google.com/webstore/detail/chathub-all-in-one-chatbo/iaakpnchhognanibcahlpcplchdfmgma">ChatHub</a>，<a href="https://chrome.google.com/webstore/detail/openai-translator/ogjibjphoadhljaoicdnjnmgokohngcc">OpenAi Translator</a></li>
</ol>
]]></content>
      <categories>
        <category>AI</category>
        <category>OPENAI</category>
      </categories>
      <tags>
        <tag>OPENAI</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>关于我在使用Cmake生成DLL的时候踩过的坑</title>
    <url>/2023/04/%E5%85%B3%E4%BA%8E%E6%88%91%E5%9C%A8%E4%BD%BF%E7%94%A8Cmake%E7%94%9F%E6%88%90DLL%E7%9A%84%E6%97%B6%E5%80%99%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>本来老师要求用Visual Studio来做C++的大作业的，但是Visual Studio实在是太卡了，所以，我选择使用Cmake+Viual Studio Code来写这样一个东西，记录一下其中踩过的坑</p>
<h1 id="生成DLL"><a href="#生成DLL" class="headerlink" title="生成DLL"></a>生成DLL</h1><p>这一步很简单，Cmake默认你的library都是静态存储库lib文件，要指定生成dll文件只需要加上一个SHARED参数即可</p>
<p>加入我想生成一个动态库命名为DLL1，其中源文件保存在Files_DLL1这个变量中，那么我的代码就是</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(DLL1 SHARED <span class="variable">$&#123;Files_DLL1&#125;</span>)</span><br></pre></td></tr></table></figure>

<p>这样Cmake就正确生成DLL，在VS中构建会同时生成.lib,.dll,.exp.pdb这四个文件</p>
<h1 id="将DLL复制到输出路径"><a href="#将DLL复制到输出路径" class="headerlink" title="将DLL复制到输出路径"></a>将DLL复制到输出路径</h1><p>为了整个项目目录的整齐，我选择将库文件全部存储到lib文件夹中，而把可执行文件输出到bin文件夹中，这样就有了一个问题:</p>
<p>生成所有文件后，因为dll文件和exe文件不在同一个文件夹内，导致无法正常进行调试</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h3><p>最简单的就是每次手动复制过去，或者直接干脆把bin和lib两个文件夹合并，但是这样就违背了我们的初衷，要么增加一步步骤，要么文件结构变混乱，所以不推荐这种做法</p>
<h2 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h2><h3 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法1</h3><p>想要在bin和lib文件夹同时存在文件，可以将lib文件夹内的内容全部复制到bin中，最先想到的应该就是copy命令</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(COPY <span class="variable">$&#123;PROJECT_SOURCE_DIR/lib&#125;</span> DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure>

<p>但是这样写的话，这段命令会优先于所有的构建进行，这样就导致无法复制任何文件到bin目录中，因为lib文件夹里在copy执行的时候是没有任何文件的，除非连续两次执行这一命令</p>
<p>但是目的是在一次操作中完成这些，所以无法使用这个方法，询问GPT-3.5，看看它是如何解决的</p>
<blockquote>
<p>您可以在CMake中使用以下代码来生成一个DLL文件，并在生成后将其复制到bin文件夹下：</p>
</blockquote>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(my_lib SHARED source_files)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set output directory of the library to the &quot;lib&quot; folder</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(my_lib PROPERTIES</span><br><span class="line">LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib</span><br><span class="line">)</span><br><span class="line"><span class="comment">#Add a custom command to copy the library to the &quot;bin&quot; folder</span></span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> my_lib POST_BUILD</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy </span><br><span class="line">        <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib/my_lib.dll</span><br><span class="line">        <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin/my_lib.dll</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里假设您的DLL文件名为my_lib.dll，源文件在source_files变量中列出。使用add_library命令来创建动态链接库，set_target_properties命令可将输出目录设置为lib文件夹。最后，使用add_custom_command命令添加在生成后自动复制DLL文件到bin文件夹的自定义命令。</p>
</blockquote>
<p>GPT设置的路径和我实际的路径不相同，并且copy命令是直接进行复制文件的，需要进行一些改变，改成对文件夹进行操作并修正路径后这段代码变为</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES</span><br><span class="line"></span><br><span class="line">LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> <span class="variable">$&#123;LibraryName&#125;</span> POST_BUILD</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy_directory</span><br><span class="line">    <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">    <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这段代码正确执行了</p>
<h3 id="解决办法2"><a href="#解决办法2" class="headerlink" title="解决办法2"></a>解决办法2</h3><p>还可以在两个文件夹中同时输出两份文件，这样可以用这一段代码</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES LINKER_LANGUAGE CXX</span><br><span class="line">        RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">        LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">        OUTPUT_NAME <span class="string">&quot;$&#123;LibraryName&#125;&quot;</span></span><br><span class="line">        PREFIX <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>但是这样操作的话，使用VS构建，生成的是lib文件和exp文件，而并非想要的dll文件和exp文件，这种情况只需要在SET_TARGET_PROPERTIES中加上一句</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">SUFFIX <span class="string">&quot;.dll&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样完整的代码是</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES LINKER_LANGUAGE CXX</span><br><span class="line">        RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">        LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">        OUTPUT_NAME <span class="string">&quot;$&#123;LibraryName&#125;&quot;</span></span><br><span class="line">        PREFIX <span class="string">&quot;&quot;</span></span><br><span class="line">        SUFFIX <span class="string">&quot;.dll&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这样也能达到想要的效果</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>C++</category>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编程</tag>
        <tag>CMAKE</tag>
        <tag>Windows编程</tag>
      </tags>
  </entry>
</search>
