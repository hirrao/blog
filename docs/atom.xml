<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪中听琴的Blog</title>
  
  
  <link href="https://snowways.top/atom.xml" rel="self"/>
  
  <link href="https://snowways.top/"/>
  <updated>2023-04-06T09:48:29.113Z</updated>
  <id>https://snowways.top/</id>
  
  <author>
    <name>雪中听琴</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于我在使用Cmake生成DLL的时候踩过的坑</title>
    <link href="https://snowways.top/2023/04/06/%E5%85%B3%E4%BA%8E%E6%88%91%E5%9C%A8%E4%BD%BF%E7%94%A8Cmake%E7%94%9F%E6%88%90DLL%E7%9A%84%E6%97%B6%E5%80%99%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/"/>
    <id>https://snowways.top/2023/04/06/%E5%85%B3%E4%BA%8E%E6%88%91%E5%9C%A8%E4%BD%BF%E7%94%A8Cmake%E7%94%9F%E6%88%90DLL%E7%9A%84%E6%97%B6%E5%80%99%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</id>
    <published>2023-04-06T09:00:00.000Z</published>
    <updated>2023-04-06T09:48:29.113Z</updated>
    
    <content type="html"><![CDATA[<p>本来老师要求用Visual Studio来做C++的大作业的，但是Visual Studio实在是太卡了，所以，我选择使用Cmake+Viual Studio Code来写这样一个东西，记录一下其中踩过的坑</p><h1 id="生成DLL"><a href="#生成DLL" class="headerlink" title="生成DLL"></a>生成DLL</h1><p>这一步很简单，Cmake默认你的library都是静态存储库lib文件，要指定生成dll文件只需要加上一个SHARED参数即可</p><p>加入我想生成一个动态库命名为DLL1，其中源文件保存在Files_DLL1这个变量中，那么我的代码就是</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(DLL1 SHARED <span class="variable">$&#123;Files_DLL1&#125;</span>)</span><br></pre></td></tr></table></figure><p>这样Cmake就正确生成DLL，在VS中构建会同时生成.lib,.dll,.exp.pdb这四个文件</p><h1 id="将DLL复制到输出路径"><a href="#将DLL复制到输出路径" class="headerlink" title="将DLL复制到输出路径"></a>将DLL复制到输出路径</h1><p>为了整个项目目录的整齐，我选择将库文件全部存储到lib文件夹中，而把可执行文件输出到bin文件夹中，这样就有了一个问题:</p><p>生成所有文件后，因为dll文件和exe文件不在同一个文件夹内，导致无法正常进行调试</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h3><p>最简单的就是每次手动复制过去，或者直接干脆把bin和lib两个文件夹合并，但是这样就违背了我们的初衷，要么增加一步步骤，要么文件结构变混乱，所以不推荐这种做法</p><h2 id="最终解决办法"><a href="#最终解决办法" class="headerlink" title="最终解决办法"></a>最终解决办法</h2><h3 id="解决办法1"><a href="#解决办法1" class="headerlink" title="解决办法1"></a>解决办法1</h3><p>想要在bin和lib文件夹同时存在文件，可以将lib文件夹内的内容全部复制到bin中，最先想到的应该就是copy命令</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span>(COPY <span class="variable">$&#123;PROJECT_SOURCE_DIR/lib&#125;</span> DESTINATION <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)</span><br></pre></td></tr></table></figure><p>但是这样写的话，这段命令会优先于所有的构建进行，这样就导致无法复制任何文件到bin目录中，因为lib文件夹里在copy执行的时候是没有任何文件的，除非连续两次执行这一命令</p><p>但是目的是在一次操作中完成这些，所以无法使用这个方法，询问GPT-3.5，看看它是如何解决的</p><blockquote><p>您可以在CMake中使用以下代码来生成一个DLL文件，并在生成后将其复制到bin文件夹下：</p></blockquote><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(my_lib SHARED source_files)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Set output directory of the library to the &quot;lib&quot; folder</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(my_lib PROPERTIES</span><br><span class="line">LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib</span><br><span class="line">)</span><br><span class="line"><span class="comment">#Add a custom command to copy the library to the &quot;bin&quot; folder</span></span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> my_lib POST_BUILD</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy </span><br><span class="line">        <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/lib/my_lib.dll</span><br><span class="line">        <span class="variable">$&#123;CMAKE_BINARY_DIR&#125;</span>/bin/my_lib.dll</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>这里假设您的DLL文件名为my_lib.dll，源文件在source_files变量中列出。使用add_library命令来创建动态链接库，set_target_properties命令可将输出目录设置为lib文件夹。最后，使用add_custom_command命令添加在生成后自动复制DLL文件到bin文件夹的自定义命令。</p></blockquote><p>GPT设置的路径和我实际的路径不相同，并且copy命令是直接进行复制文件的，需要进行一些改变，改成对文件夹进行操作并修正路径后这段代码变为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set_target_properties</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES</span><br><span class="line"></span><br><span class="line">LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_custom_command</span>(<span class="keyword">TARGET</span> <span class="variable">$&#123;LibraryName&#125;</span> POST_BUILD</span><br><span class="line">    <span class="keyword">COMMAND</span> <span class="variable">$&#123;CMAKE_COMMAND&#125;</span> -E copy_directory</span><br><span class="line">    <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">    <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这段代码正确执行了</p><h3 id="解决办法2"><a href="#解决办法2" class="headerlink" title="解决办法2"></a>解决办法2</h3><p>还可以在两个文件夹中同时输出两份文件，这样可以用这一段代码</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES LINKER_LANGUAGE CXX</span><br><span class="line">        RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">        LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">        OUTPUT_NAME <span class="string">&quot;$&#123;LibraryName&#125;&quot;</span></span><br><span class="line">        PREFIX <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>但是这样操作的话，使用VS构建，生成的是lib文件和exp文件，而并非想要的dll文件和exp文件，这种情况只需要在SET_TARGET_PROPERTIES中加上一句</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUFFIX <span class="string">&quot;.dll&quot;</span></span><br></pre></td></tr></table></figure><p>这样完整的代码是</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET_TARGET_PROPERTIES</span>(<span class="variable">$&#123;LibraryName&#125;</span> PROPERTIES LINKER_LANGUAGE CXX</span><br><span class="line">        RUNTIME_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin</span><br><span class="line">        LIBRARY_OUTPUT_DIRECTORY <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib</span><br><span class="line">        OUTPUT_NAME <span class="string">&quot;$&#123;LibraryName&#125;&quot;</span></span><br><span class="line">        PREFIX <span class="string">&quot;&quot;</span></span><br><span class="line">        SUFFIX <span class="string">&quot;.dll&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样也能达到想要的效果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来老师要求用Visual Studio来做C++的大作业的，但是Visual Studio实在是太卡了，所以，我选择使用Cmake+Viual Studio Code来写这样一个东西，记录一下其中踩过的坑&lt;/p&gt;
&lt;h1 id=&quot;生成DLL&quot;&gt;&lt;a href=&quot;#生成DL</summary>
      
    
    
    
    <category term="编程" scheme="https://snowways.top/categories/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="C++" scheme="https://snowways.top/categories/%E7%BC%96%E7%A8%8B/C/"/>
    
    
    <category term="C++" scheme="https://snowways.top/tags/C/"/>
    
    <category term="编程" scheme="https://snowways.top/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="CMAKE" scheme="https://snowways.top/tags/CMAKE/"/>
    
    <category term="Windows" scheme="https://snowways.top/tags/Windows/"/>
    
  </entry>
  
</feed>
